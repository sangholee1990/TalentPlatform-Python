# -*- coding: utf-8 -*-
"""20231106_Final HW_First_Draft2.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O3TZmpTC2exaZjwOd_DJzYaGkvtmm-Cz
"""

# 라이브러리 읽기
import pandas as pd
import numpy as np
from traitlets.traitlets import observe_compat
from numpy.lib.function_base import percentile
import matplotlib.pyplot as plt
import seaborn as sns

# 파일 읽기
# gusto=pd.read_csv('/content/drive/MyDrive/UofM Biostatistics/BIOSTAT 607-2 PYTHON MODULE/HW/Final HW/gusto.csv')
gusto = pd.read_csv('./gusto.csv')
print(gusto.head())

# Question 1
conditions=gusto[(gusto['PMI']==1)&(gusto['DAY30']==1)]
print(len(conditions)) # Return 31

# Question 2
## (a) Count missing values in SMK variables
SMK_NA_TTL=gusto['SMK'].isnull().sum()
print(SMK_NA_TTL) # Return 97

## (b)
B=gusto.groupby(gusto['SMK'].fillna('NA')).mean()['AGE']
for category, mean_age in B.items():
  print(f"When Smoking Category is {category}, mean age is {mean_age}")

# Question 3 (Results did NOT show!!!)
## (a) Create 'DAY30_A65' variables
def DAY30_A65(row):
  if row['DAY30']==0 and row['AGE']>=65:
    return 1
  elif row['DAY30']==1 and row['AGE']>=65:
    return 2
  elif row['DAY30']==0 and row['AGE']<65:
    return 3
  elif row['DAY30']==1 and row['AGE']<65:
    return 4
gusto['DAY30_A65'] = gusto.apply(DAY30_A65, axis=1)
print(gusto.head())

## (b) Count the number of observations have DAY30_A65 =k for k=1,2,3,4
observations=gusto['DAY30_A65'].value_counts().sort_index()
print(observations)
# Return 580 observations when k=1,
#107 observations when k=2,
#1076 observations when k=3, and
# 34 observations when k=4
# in 'DAY30_A65' variables

# Question 4
## (a) Create RS variable
def getRs(row):
    baseRs = 0.1 * row['AGE'] + 0.5 * row['PMI'] + 1.0 * row['HYP']
    if row['KILLIP'] == 3:
        return baseRs + 2.0
    elif row['KILLIP'] == 4:
        return baseRs + 3.0
    else:
        return baseRs

gusto['rs'] = gusto.apply(getRs, axis=1)
# print(gusto.head())
print(f'[CHECK] gusto : {gusto}')

perRs = gusto['rs'].quantile([0.25, 0.5, 0.75])
print(f'[CHECK] perRs : {perRs}')

# Question 5
conditions = [
    (gusto['rs'] <= perRs[0.25]),
    (gusto['rs'] > perRs[0.25]) & (gusto['rs'] <= perRs[0.5]),
    (gusto['rs'] > perRs[0.5]) & (gusto['rs'] <= perRs[0.75]),
    (gusto['rs'] > perRs[0.75])
]

choices = ['Q1', 'Q2', 'Q3', 'Q4']
gusto['risk_strata'] = np.select(conditions, choices)
print(f'[CHECK] gusto : {gusto}')

# Question 6
## (1) Q1 범주에서 30일 이내 사망 비율
deathRateQ1 = gusto[gusto['risk_strata'] == 'Q1']['DAY30'].mean()
print(f'[CHECK] deathRateQ1 : {deathRateQ1}')

## (1) Q4 범주에서 30일 이내 사망 비율
deathRateQ4 = gusto[gusto['risk_strata'] == 'Q4']['DAY30'].mean()
print(f'[CHECK] deathRateQ4 : {deathRateQ4}')

# Question 7
# 'rs'의 최소값과 최대값 사이에 있는 10개의 값을 포함하는 배열 생성
carr = np.linspace(gusto['rs'].min(), gusto['rs'].max(), 10)

# 배열을 생성하기 위한 초기화
statArr = np.zeros((10, 4))
statArr[:, 0] = carr

# 각 carr 값에 대한 통계 계산
# 환자수, 사망자수, 사망비율
for k in range(10):
    filtered_patients = gusto[gusto['rs'] <= carr[k]]
    statArr[k, 1] = len(filtered_patients)
    statArr[k, 2] = filtered_patients['DAY30'].sum()
    statArr[k, 3] = statArr[k, 2] / statArr[k, 1]

statData = pd.DataFrame(statArr, columns=['carr', 'cnt', 'deathCnt', 'ratio'])
print(f'[CHECK] statData : {statData}')

# Question 8
# 100명 이상의 관찰치를 갖는 그룹에서 최소 사망 비율을 갖는 carr 값 찾기
selData = statData[statData['cnt'] >= 100]
minDeathRateIdx = selData['ratio'].idxmin()

getCarr = statData.loc[minDeathRateIdx, 'carr']
print(f'[CHECK] getCarr : {getCarr}')

gusto['rs'][:None]

# Question 9
# Compare 배열 초기화
comData = np.zeros((1797, 1797))

# 배열 요소 채우기
getRs = np.array(gusto['rs'])
getDAY30 = np.array(gusto['DAY30'])

for i in range(1797):
    for j in range(1797):
        if ((getRs[i] <= 6.0 and getRs[j] > 6.0 and getDAY30[i] == 0 and getDAY30[j] == 1) or
            (getRs[i] > 6.0 and getRs[j] <= 6.0 and getDAY30[i] == 1 and getDAY30[j] == 0)):
            comData[i, j] = 1.0

# 요소들의 합을 계산
sumValue = comData.sum()
print(f'[CHECK] sumValue : {sumValue}')

# Question 10
## (a) Create 'bmi' variable
gusto['bmi'] = (10000 * gusto['WEI']) / (gusto['HEI'] ** 2)
print(gusto.head())


# BMI가 30 이상이고 나이가 65 이상인 환자 수 계산
bmi_age_condition = (gusto['bmi'] >= 30) & (gusto['AGE'] >= 65)
count_bmi_age = gusto[bmi_age_condition].shape[0]

print(f"Number of individuals with BMI ≥ 30 and AGE ≥ 65: {count_bmi_age}")

## (b) How many individuals have both bmi ≥ 30 and AGE ≥ 65?
Answer = gusto[(gusto['bmi'] >= 30) & (gusto['AGE'] >= 65)]
print(len(Answer)) # Return 92

# Question 11
plt.figure(figsize=(10, 6))
for sex, color in zip(gusto['SEX'].unique(), ['blue', 'red']):
    subset = gusto[gusto['SEX'] == sex]
    plt.scatter(subset['AGE'], subset['bmi'], c=color, label=f'SEX {sex}', alpha=0.5)

plt.xlabel('AGE')
plt.ylabel('BMI')

plt.legend()

plt.show()

# Question 12
plt.figure(figsize=(10, 6))
sns.boxplot(data=gusto, x='risk_strata', y='bmi')
plt.title('Boxplots of BMI by Risk Strata')
plt.xlabel('Risk Strata')
plt.ylabel('BMI')
plt.show()